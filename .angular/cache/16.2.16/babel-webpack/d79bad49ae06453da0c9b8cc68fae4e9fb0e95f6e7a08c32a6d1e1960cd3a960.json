{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport * as Highcharts from 'highcharts';\nimport OrganizationModule from 'highcharts/modules/organization';\nimport Exporting from 'highcharts/modules/exporting';\nOrganizationModule(Highcharts);\nExporting(Highcharts);\nexport let FlowVisualizerComponent = class FlowVisualizerComponent {\n  constructor() {\n    this.data = {\n      systems: [{\n        id: 'System A',\n        databases: [{\n          id: 'DB1',\n          fields: [{\n            id: 'Field1'\n          }, {\n            id: 'Field2'\n          }]\n        }, {\n          id: 'DB2',\n          fields: [{\n            id: 'Field3'\n          }]\n        }]\n      }, {\n        id: 'System B',\n        databases: [{\n          id: 'DB3',\n          fields: [{\n            id: 'FieldA'\n          }]\n        }, {\n          id: 'DB4',\n          fields: [{\n            id: 'FieldB'\n          }]\n        }]\n      }]\n    };\n    this.selectedSystemId = null;\n    this.selectedDBId = null;\n    this.newFieldId = '';\n    this.Highcharts = Highcharts;\n    this.chartOptions = {};\n  }\n  ngOnInit() {\n    if (this.data.systems.length > 0) {\n      this.selectedSystemId = this.data.systems[0].id;\n      const firstSystem = this.getSelectedSystem();\n      if (firstSystem && firstSystem.databases.length > 0) {\n        this.selectedDBId = firstSystem.databases[0].id;\n      }\n    }\n    this.updateChart();\n  }\n  getSelectedSystem() {\n    return this.data.systems.find(s => s.id === this.selectedSystemId);\n  }\n  getDatabasesForSelectedSystem() {\n    return this.getSelectedSystem()?.databases || [];\n  }\n  addField() {\n    if (!this.newFieldId || !this.selectedSystemId || !this.selectedDBId) {\n      alert('Please select system, database and enter field name');\n      return;\n    }\n    const system = this.getSelectedSystem();\n    if (!system) return;\n    const db = system.databases.find(d => d.id === this.selectedDBId);\n    if (!db) return;\n    if (db.fields.find(f => f.id === this.newFieldId)) {\n      alert('Field already exists');\n      return;\n    }\n    db.fields.push({\n      id: this.newFieldId\n    });\n    this.newFieldId = '';\n    this.updateChart();\n  }\n  updateChart() {\n    const chartNodes = [];\n    const chartLinks = [];\n    this.data.systems.forEach(system => {\n      chartNodes.push({\n        id: system.id,\n        title: system.id,\n        name: 'System'\n      });\n      system.databases.forEach(db => {\n        chartNodes.push({\n          id: db.id,\n          title: db.id,\n          name: 'Database'\n        });\n        chartLinks.push([system.id, db.id]);\n        db.fields.forEach(field => {\n          chartNodes.push({\n            id: field.id,\n            title: field.id,\n            name: 'Field'\n          });\n          chartLinks.push([db.id, field.id]);\n        });\n      });\n    });\n    this.chartOptions = {\n      chart: {\n        height: 600,\n        inverted: true\n      },\n      title: {\n        text: 'Organization Chart: Systems → Databases → Fields'\n      },\n      series: [{\n        type: 'organization',\n        name: 'Systems Structure',\n        keys: ['from', 'to'],\n        data: chartLinks,\n        nodes: chartNodes,\n        colorByPoint: false,\n        color: '#007ad0',\n        borderColor: 'white',\n        nodeWidth: 100\n      }],\n      tooltip: {\n        outside: true\n      },\n      exporting: {\n        allowHTML: true,\n        sourceWidth: 800,\n        sourceHeight: 600\n      }\n    };\n  }\n};\nFlowVisualizerComponent = __decorate([Component({\n  selector: 'app-flow-visualizer',\n  templateUrl: './flow-visualizer.component.html',\n  styleUrls: ['./flow-visualizer.component.css']\n})], FlowVisualizerComponent);","map":{"version":3,"names":["Component","Highcharts","OrganizationModule","Exporting","FlowVisualizerComponent","constructor","data","systems","id","databases","fields","selectedSystemId","selectedDBId","newFieldId","chartOptions","ngOnInit","length","firstSystem","getSelectedSystem","updateChart","find","s","getDatabasesForSelectedSystem","addField","alert","system","db","d","f","push","chartNodes","chartLinks","forEach","title","name","field","chart","height","inverted","text","series","type","keys","nodes","colorByPoint","color","borderColor","nodeWidth","tooltip","outside","exporting","allowHTML","sourceWidth","sourceHeight","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\DELL\\flow-visualizer-test\\src\\app\\horizontal-organization-chart-visualizer\\horizontal-organization-chart-visualizer.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport * as Highcharts from 'highcharts';\nimport OrganizationModule from 'highcharts/modules/organization';\nimport Exporting from 'highcharts/modules/exporting';\n\nOrganizationModule(Highcharts);\nExporting(Highcharts);\n\ninterface Field {\n  id: string;\n}\ninterface Database {\n  id: string;\n  fields: Field[];\n}\ninterface System {\n  id: string;\n  databases: Database[];\n}\n\n@Component({\n  selector: 'app-flow-visualizer',\n  templateUrl: './flow-visualizer.component.html',\n  styleUrls: ['./flow-visualizer.component.css']\n})\nexport class FlowVisualizerComponent implements OnInit {\n  data: { systems: System[] } = {\n    systems: [\n      {\n        id: 'System A',\n        databases: [\n          { id: 'DB1', fields: [{ id: 'Field1' }, { id: 'Field2' }] },\n          { id: 'DB2', fields: [{ id: 'Field3' }] }\n        ]\n      },\n      {\n        id: 'System B',\n        databases: [\n          { id: 'DB3', fields: [{ id: 'FieldA' }] },\n          { id: 'DB4', fields: [{ id: 'FieldB' }] }\n        ]\n      }\n    ]\n  };\n\n  selectedSystemId: string | null = null;\n  selectedDBId: string | null = null;\n  newFieldId: string = '';\n\n  Highcharts: typeof Highcharts = Highcharts;\n  chartOptions: Highcharts.Options = {};\n\n  ngOnInit(): void {\n    if (this.data.systems.length > 0) {\n      this.selectedSystemId = this.data.systems[0].id;\n      const firstSystem = this.getSelectedSystem();\n      if (firstSystem && firstSystem.databases.length > 0) {\n        this.selectedDBId = firstSystem.databases[0].id;\n      }\n    }\n    this.updateChart();\n  }\n\n  getSelectedSystem(): System | undefined {\n    return this.data.systems.find(s => s.id === this.selectedSystemId);\n  }\n\n  getDatabasesForSelectedSystem(): Database[] {\n    return this.getSelectedSystem()?.databases || [];\n  }\n\n  addField(): void {\n    if (!this.newFieldId || !this.selectedSystemId || !this.selectedDBId) {\n      alert('Please select system, database and enter field name');\n      return;\n    }\n\n    const system = this.getSelectedSystem();\n    if (!system) return;\n\n    const db = system.databases.find(d => d.id === this.selectedDBId);\n    if (!db) return;\n\n    if (db.fields.find(f => f.id === this.newFieldId)) {\n      alert('Field already exists');\n      return;\n    }\n\n    db.fields.push({ id: this.newFieldId });\n    this.newFieldId = '';\n    this.updateChart();\n  }\n\n  updateChart() {\n    const chartNodes: any[] = [];\n    const chartLinks: any[] = [];\n\n    this.data.systems.forEach(system => {\n      chartNodes.push({ id: system.id, title: system.id, name: 'System' });\n\n      system.databases.forEach(db => {\n        chartNodes.push({ id: db.id, title: db.id, name: 'Database' });\n        chartLinks.push([system.id, db.id]);\n\n        db.fields.forEach(field => {\n          chartNodes.push({ id: field.id, title: field.id, name: 'Field' });\n          chartLinks.push([db.id, field.id]);\n        });\n      });\n    });\n\n    this.chartOptions = {\n      chart: {\n        height: 600,\n        inverted: true\n      },\n      title: {\n        text: 'Organization Chart: Systems → Databases → Fields'\n      },\n      series: [{\n        type: 'organization',\n        name: 'Systems Structure',\n        keys: ['from', 'to'],\n        data: chartLinks,\n        nodes: chartNodes,\n        colorByPoint: false,\n        color: '#007ad0',\n        borderColor: 'white',\n        nodeWidth: 100\n      }],\n      tooltip: {\n        outside: true\n      },\n      exporting: {\n        allowHTML: true,\n        sourceWidth: 800,\n        sourceHeight: 600\n      }\n    };\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AACjD,OAAO,KAAKC,UAAU,MAAM,YAAY;AACxC,OAAOC,kBAAkB,MAAM,iCAAiC;AAChE,OAAOC,SAAS,MAAM,8BAA8B;AAEpDD,kBAAkB,CAACD,UAAU,CAAC;AAC9BE,SAAS,CAACF,UAAU,CAAC;AAmBd,WAAMG,uBAAuB,GAA7B,MAAMA,uBAAuB;EAA7BC,YAAA;IACL,KAAAC,IAAI,GAA0B;MAC5BC,OAAO,EAAE,CACP;QACEC,EAAE,EAAE,UAAU;QACdC,SAAS,EAAE,CACT;UAAED,EAAE,EAAE,KAAK;UAAEE,MAAM,EAAE,CAAC;YAAEF,EAAE,EAAE;UAAQ,CAAE,EAAE;YAAEA,EAAE,EAAE;UAAQ,CAAE;QAAC,CAAE,EAC3D;UAAEA,EAAE,EAAE,KAAK;UAAEE,MAAM,EAAE,CAAC;YAAEF,EAAE,EAAE;UAAQ,CAAE;QAAC,CAAE;OAE5C,EACD;QACEA,EAAE,EAAE,UAAU;QACdC,SAAS,EAAE,CACT;UAAED,EAAE,EAAE,KAAK;UAAEE,MAAM,EAAE,CAAC;YAAEF,EAAE,EAAE;UAAQ,CAAE;QAAC,CAAE,EACzC;UAAEA,EAAE,EAAE,KAAK;UAAEE,MAAM,EAAE,CAAC;YAAEF,EAAE,EAAE;UAAQ,CAAE;QAAC,CAAE;OAE5C;KAEJ;IAED,KAAAG,gBAAgB,GAAkB,IAAI;IACtC,KAAAC,YAAY,GAAkB,IAAI;IAClC,KAAAC,UAAU,GAAW,EAAE;IAEvB,KAAAZ,UAAU,GAAsBA,UAAU;IAC1C,KAAAa,YAAY,GAAuB,EAAE;EA0FvC;EAxFEC,QAAQA,CAAA;IACN,IAAI,IAAI,CAACT,IAAI,CAACC,OAAO,CAACS,MAAM,GAAG,CAAC,EAAE;MAChC,IAAI,CAACL,gBAAgB,GAAG,IAAI,CAACL,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,CAACC,EAAE;MAC/C,MAAMS,WAAW,GAAG,IAAI,CAACC,iBAAiB,EAAE;MAC5C,IAAID,WAAW,IAAIA,WAAW,CAACR,SAAS,CAACO,MAAM,GAAG,CAAC,EAAE;QACnD,IAAI,CAACJ,YAAY,GAAGK,WAAW,CAACR,SAAS,CAAC,CAAC,CAAC,CAACD,EAAE;;;IAGnD,IAAI,CAACW,WAAW,EAAE;EACpB;EAEAD,iBAAiBA,CAAA;IACf,OAAO,IAAI,CAACZ,IAAI,CAACC,OAAO,CAACa,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACb,EAAE,KAAK,IAAI,CAACG,gBAAgB,CAAC;EACpE;EAEAW,6BAA6BA,CAAA;IAC3B,OAAO,IAAI,CAACJ,iBAAiB,EAAE,EAAET,SAAS,IAAI,EAAE;EAClD;EAEAc,QAAQA,CAAA;IACN,IAAI,CAAC,IAAI,CAACV,UAAU,IAAI,CAAC,IAAI,CAACF,gBAAgB,IAAI,CAAC,IAAI,CAACC,YAAY,EAAE;MACpEY,KAAK,CAAC,qDAAqD,CAAC;MAC5D;;IAGF,MAAMC,MAAM,GAAG,IAAI,CAACP,iBAAiB,EAAE;IACvC,IAAI,CAACO,MAAM,EAAE;IAEb,MAAMC,EAAE,GAAGD,MAAM,CAAChB,SAAS,CAACW,IAAI,CAACO,CAAC,IAAIA,CAAC,CAACnB,EAAE,KAAK,IAAI,CAACI,YAAY,CAAC;IACjE,IAAI,CAACc,EAAE,EAAE;IAET,IAAIA,EAAE,CAAChB,MAAM,CAACU,IAAI,CAACQ,CAAC,IAAIA,CAAC,CAACpB,EAAE,KAAK,IAAI,CAACK,UAAU,CAAC,EAAE;MACjDW,KAAK,CAAC,sBAAsB,CAAC;MAC7B;;IAGFE,EAAE,CAAChB,MAAM,CAACmB,IAAI,CAAC;MAAErB,EAAE,EAAE,IAAI,CAACK;IAAU,CAAE,CAAC;IACvC,IAAI,CAACA,UAAU,GAAG,EAAE;IACpB,IAAI,CAACM,WAAW,EAAE;EACpB;EAEAA,WAAWA,CAAA;IACT,MAAMW,UAAU,GAAU,EAAE;IAC5B,MAAMC,UAAU,GAAU,EAAE;IAE5B,IAAI,CAACzB,IAAI,CAACC,OAAO,CAACyB,OAAO,CAACP,MAAM,IAAG;MACjCK,UAAU,CAACD,IAAI,CAAC;QAAErB,EAAE,EAAEiB,MAAM,CAACjB,EAAE;QAAEyB,KAAK,EAAER,MAAM,CAACjB,EAAE;QAAE0B,IAAI,EAAE;MAAQ,CAAE,CAAC;MAEpET,MAAM,CAAChB,SAAS,CAACuB,OAAO,CAACN,EAAE,IAAG;QAC5BI,UAAU,CAACD,IAAI,CAAC;UAAErB,EAAE,EAAEkB,EAAE,CAAClB,EAAE;UAAEyB,KAAK,EAAEP,EAAE,CAAClB,EAAE;UAAE0B,IAAI,EAAE;QAAU,CAAE,CAAC;QAC9DH,UAAU,CAACF,IAAI,CAAC,CAACJ,MAAM,CAACjB,EAAE,EAAEkB,EAAE,CAAClB,EAAE,CAAC,CAAC;QAEnCkB,EAAE,CAAChB,MAAM,CAACsB,OAAO,CAACG,KAAK,IAAG;UACxBL,UAAU,CAACD,IAAI,CAAC;YAAErB,EAAE,EAAE2B,KAAK,CAAC3B,EAAE;YAAEyB,KAAK,EAAEE,KAAK,CAAC3B,EAAE;YAAE0B,IAAI,EAAE;UAAO,CAAE,CAAC;UACjEH,UAAU,CAACF,IAAI,CAAC,CAACH,EAAE,CAAClB,EAAE,EAAE2B,KAAK,CAAC3B,EAAE,CAAC,CAAC;QACpC,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF,IAAI,CAACM,YAAY,GAAG;MAClBsB,KAAK,EAAE;QACLC,MAAM,EAAE,GAAG;QACXC,QAAQ,EAAE;OACX;MACDL,KAAK,EAAE;QACLM,IAAI,EAAE;OACP;MACDC,MAAM,EAAE,CAAC;QACPC,IAAI,EAAE,cAAc;QACpBP,IAAI,EAAE,mBAAmB;QACzBQ,IAAI,EAAE,CAAC,MAAM,EAAE,IAAI,CAAC;QACpBpC,IAAI,EAAEyB,UAAU;QAChBY,KAAK,EAAEb,UAAU;QACjBc,YAAY,EAAE,KAAK;QACnBC,KAAK,EAAE,SAAS;QAChBC,WAAW,EAAE,OAAO;QACpBC,SAAS,EAAE;OACZ,CAAC;MACFC,OAAO,EAAE;QACPC,OAAO,EAAE;OACV;MACDC,SAAS,EAAE;QACTC,SAAS,EAAE,IAAI;QACfC,WAAW,EAAE,GAAG;QAChBC,YAAY,EAAE;;KAEjB;EACH;CACD;AAnHYjD,uBAAuB,GAAAkD,UAAA,EALnCtD,SAAS,CAAC;EACTuD,QAAQ,EAAE,qBAAqB;EAC/BC,WAAW,EAAE,kCAAkC;EAC/CC,SAAS,EAAE,CAAC,iCAAiC;CAC9C,CAAC,C,EACWrD,uBAAuB,CAmHnC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}