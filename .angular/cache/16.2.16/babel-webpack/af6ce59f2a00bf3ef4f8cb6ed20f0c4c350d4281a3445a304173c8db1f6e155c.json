{"ast":null,"code":"import * as Highcharts from 'highcharts';\nimport * as i0 from \"@angular/core\";\nexport class FlowVisualizerComponent {\n  constructor() {\n    this.data = {\n      systems: [{\n        id: 'System A',\n        databases: [{\n          id: 'DB1',\n          fields: [{\n            id: 'Field1'\n          }, {\n            id: 'Field2'\n          }]\n        }, {\n          id: 'DB2',\n          fields: [{\n            id: 'Field3'\n          }]\n        }]\n      }, {\n        id: 'System B',\n        databases: [{\n          id: 'DB3',\n          fields: [{\n            id: 'FieldA'\n          }]\n        }]\n      }]\n    };\n    this.selectedSystemId = null;\n    this.selectedDBId = null;\n    this.newFieldId = '';\n    this.Highcharts = Highcharts;\n    this.chartOptions = {};\n  }\n  ngOnInit() {\n    if (this.data.systems.length > 0) {\n      this.selectedSystemId = this.data.systems[0].id;\n      const firstSystem = this.getSelectedSystem();\n      if (firstSystem && firstSystem.databases.length > 0) {\n        this.selectedDBId = firstSystem.databases[0].id;\n      }\n    }\n    this.updateChart();\n  }\n  getSelectedSystem() {\n    return this.data.systems.find(s => s.id === this.selectedSystemId);\n  }\n  getDatabasesForSelectedSystem() {\n    const system = this.getSelectedSystem();\n    return system ? system.databases : [];\n  }\n  addField() {\n    if (!this.newFieldId || !this.selectedSystemId || !this.selectedDBId) {\n      alert('Please select system, database and enter field name');\n      return;\n    }\n    const system = this.getSelectedSystem();\n    if (!system) return;\n    const db = system.databases.find(d => d.id === this.selectedDBId);\n    if (!db) return;\n    if (db.fields.find(f => f.id === this.newFieldId)) {\n      alert('Field already exists');\n      return;\n    }\n    db.fields.push({\n      id: this.newFieldId\n    });\n    this.newFieldId = '';\n    this.updateChart();\n  }\n  updateChart() {\n    const seriesData = [];\n    this.data.systems.forEach(system => {\n      system.databases.forEach(db => {\n        db.fields.forEach(field => {\n          seriesData.push({\n            name: `${system.id} > ${db.id} > ${field.id}`,\n            y: Math.floor(Math.random() * 100) + 1\n          });\n        });\n      });\n    });\n    this.chartOptions = {\n      chart: {\n        type: 'column'\n      },\n      title: {\n        text: 'Fields Usage Example Chart'\n      },\n      xAxis: {\n        type: 'category',\n        title: {\n          text: 'System > Database > Field'\n        }\n      },\n      yAxis: {\n        title: {\n          text: 'Random Value'\n        }\n      },\n      legend: {\n        enabled: false\n      },\n      series: [{\n        name: 'Field Value',\n        data: seriesData,\n        type: 'column',\n        colorByPoint: true\n      }]\n    };\n  }\n  static {\n    this.ɵfac = function FlowVisualizerComponent_Factory(t) {\n      return new (t || FlowVisualizerComponent)();\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: FlowVisualizerComponent,\n      selectors: [[\"app-flow-visualizer\"]],\n      decls: 1,\n      vars: 2,\n      consts: [[2, \"width\", \"100%\", \"height\", \"600px\", \"display\", \"block\", 3, \"Highcharts\", \"options\"]],\n      template: function FlowVisualizerComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelement(0, \"flow-visualizer\", 0);\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"Highcharts\", ctx.Highcharts)(\"options\", ctx.chartOptions);\n        }\n      },\n      styles: [\"label[_ngcontent-%COMP%] {\\n  display: block;\\n  margin: 10px 0;\\n}\\n\\nbutton[_ngcontent-%COMP%] {\\n  margin-top: 10px;\\n  padding: 8px 16px;\\n  font-size: 16px;\\n  cursor: pointer;\\n}\\n\\n.flow-visualizer-container[_ngcontent-%COMP%] {\\n  display: flex;\\n  align-items: center;\\n  justify-content: space-around;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvZmxvdy12aXN1YWxpemVyL2Zsb3ctdmlzdWFsaXplci5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsY0FBYztFQUNkLGNBQWM7QUFDaEI7O0FBRUE7RUFDRSxnQkFBZ0I7RUFDaEIsaUJBQWlCO0VBQ2pCLGVBQWU7RUFDZixlQUFlO0FBQ2pCOztBQUVBO0VBQ0UsYUFBYTtFQUNiLG1CQUFtQjtFQUNuQiw2QkFBNkI7QUFDL0IiLCJzb3VyY2VzQ29udGVudCI6WyJsYWJlbCB7XHJcbiAgZGlzcGxheTogYmxvY2s7XHJcbiAgbWFyZ2luOiAxMHB4IDA7XHJcbn1cclxuXHJcbmJ1dHRvbiB7XHJcbiAgbWFyZ2luLXRvcDogMTBweDtcclxuICBwYWRkaW5nOiA4cHggMTZweDtcclxuICBmb250LXNpemU6IDE2cHg7XHJcbiAgY3Vyc29yOiBwb2ludGVyO1xyXG59XHJcblxyXG4uZmxvdy12aXN1YWxpemVyLWNvbnRhaW5lciB7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kO1xyXG59Il0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n}","map":{"version":3,"names":["Highcharts","FlowVisualizerComponent","constructor","data","systems","id","databases","fields","selectedSystemId","selectedDBId","newFieldId","chartOptions","ngOnInit","length","firstSystem","getSelectedSystem","updateChart","find","s","getDatabasesForSelectedSystem","system","addField","alert","db","d","f","push","seriesData","forEach","field","name","y","Math","floor","random","chart","type","title","text","xAxis","yAxis","legend","enabled","series","colorByPoint","selectors","decls","vars","consts","template","FlowVisualizerComponent_Template","rf","ctx","i0","ɵɵelement","ɵɵproperty"],"sources":["C:\\Users\\DELL\\flow-visualizer-test\\src\\app\\flow-visualizer\\flow-visualizer.component.ts","C:\\Users\\DELL\\flow-visualizer-test\\src\\app\\flow-visualizer\\flow-visualizer.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport * as Highcharts from 'highcharts';\n\ninterface Field {\n  id: string;\n}\n\ninterface Database {\n  id: string;\n  fields: Field[];\n}\n\ninterface System {\n  id: string;\n  databases: Database[];\n}\n\n@Component({\n  selector: 'app-flow-visualizer',\n  templateUrl: './flow-visualizer.component.html',\n  styleUrls: ['./flow-visualizer.component.css']\n})\nexport class FlowVisualizerComponent implements OnInit {\n  data: { systems: System[] } = {\n    systems: [\n      {\n        id: 'System A',\n        databases: [\n          { id: 'DB1', fields: [{ id: 'Field1' }, { id: 'Field2' }] },\n          { id: 'DB2', fields: [{ id: 'Field3' }] }\n        ]\n      },\n      {\n        id: 'System B',\n        databases: [\n          { id: 'DB3', fields: [{ id: 'FieldA' }] }\n        ]\n      }\n    ]\n  };\n\n  selectedSystemId: string | null = null;\n  selectedDBId: string | null = null;\n  newFieldId: string = '';\n\n  Highcharts: typeof Highcharts = Highcharts;\n  chartOptions: Highcharts.Options = {};\n\n  ngOnInit(): void {\n    if (this.data.systems.length > 0) {\n      this.selectedSystemId = this.data.systems[0].id;\n      const firstSystem = this.getSelectedSystem();\n      if (firstSystem && firstSystem.databases.length > 0) {\n        this.selectedDBId = firstSystem.databases[0].id;\n      }\n    }\n    this.updateChart();\n  }\n\n  getSelectedSystem(): System | undefined {\n    return this.data.systems.find(s => s.id === this.selectedSystemId);\n  }\n\n  getDatabasesForSelectedSystem(): Database[] {\n    const system = this.getSelectedSystem();\n    return system ? system.databases : [];\n  }\n\n  addField(): void {\n    if (!this.newFieldId || !this.selectedSystemId || !this.selectedDBId) {\n      alert('Please select system, database and enter field name');\n      return;\n    }\n\n    const system = this.getSelectedSystem();\n    if (!system) return;\n\n    const db = system.databases.find(d => d.id === this.selectedDBId);\n    if (!db) return;\n\n    if (db.fields.find(f => f.id === this.newFieldId)) {\n      alert('Field already exists');\n      return;\n    }\n\n    db.fields.push({ id: this.newFieldId });\n    this.newFieldId = '';\n    this.updateChart();\n  }\n\n  updateChart() {\n    const seriesData:any = [];\n\n    this.data.systems.forEach(system => {\n      system.databases.forEach(db => {\n        db.fields.forEach(field => {\n          seriesData.push({\n            name: `${system.id} > ${db.id} > ${field.id}`,\n            y: Math.floor(Math.random() * 100) + 1\n          });\n        });\n      });\n    });\n\n    this.chartOptions = {\n      chart: {\n        type: 'column'\n      },\n      title: {\n        text: 'Fields Usage Example Chart'\n      },\n      xAxis: {\n        type: 'category',\n        title: { text: 'System > Database > Field' }\n      },\n      yAxis: {\n        title: {\n          text: 'Random Value'\n        }\n      },\n      legend: {\n        enabled: false\n      },\n      series: [{\n        name: 'Field Value',\n        data: seriesData,\n        type: 'column',\n        colorByPoint: true\n      }]\n    };\n  }\n}\n","<flow-visualizer \n  [Highcharts]=\"Highcharts\"\n  [options]=\"chartOptions\"\n  style=\"width: 100%; height: 600px; display: block;\">\n</flow-visualizer>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}