{"ast":null,"code":"import * as Highcharts from 'highcharts';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"highcharts-angular\";\nexport class FlowVisualizerComponent {\n  constructor() {\n    this.Highcharts = Highcharts;\n    this.chartOptions = {\n      chart: {\n        type: 'organization',\n        inverted: true,\n        height: 600\n      },\n      title: {\n        text: 'System Flow'\n      },\n      series: [{\n        type: 'organization',\n        name: 'Org Chart',\n        keys: ['from', 'to'],\n        data: [['System A', 'DB1'], ['System A', 'DB2'], ['DB1', 'Field1'], ['DB1', 'Field2'], ['DB2', 'Field3'], ['System B', 'DB3'], ['System B', 'DB4'], ['DB3', 'FieldA'], ['DB4', 'FieldB']],\n        nodes: [{\n          id: 'System A',\n          title: 'System A',\n          name: 'System A'\n        }, {\n          id: 'DB1',\n          title: 'DB1',\n          name: 'Database 1'\n        }, {\n          id: 'DB2',\n          title: 'DB2',\n          name: 'Database 2'\n        }, {\n          id: 'Field1',\n          title: 'Field1',\n          name: 'Field 1'\n        }, {\n          id: 'Field2',\n          title: 'Field2',\n          name: 'Field 2'\n        }, {\n          id: 'Field3',\n          title: 'Field3',\n          name: 'Field 3'\n        }, {\n          id: 'System B',\n          title: 'System B',\n          name: 'System B'\n        }, {\n          id: 'DB3',\n          title: 'DB3',\n          name: 'Database 3'\n        }, {\n          id: 'DB4',\n          title: 'DB4',\n          name: 'Database 4'\n        }, {\n          id: 'FieldA',\n          title: 'FieldA',\n          name: 'Field A'\n        }, {\n          id: 'FieldB',\n          title: 'FieldB',\n          name: 'Field B'\n        }],\n        colorByPoint: false,\n        color: '#007ad0',\n        dataLabels: {\n          color: 'white'\n        },\n        borderColor: 'white',\n        nodeWidth: 65\n      }],\n      tooltip: {\n        outside: true\n      },\n      exporting: {\n        allowHTML: true\n      }\n    };\n  }\n  ngOnInit() {}\n  static {\n    this.ɵfac = function FlowVisualizerComponent_Factory(t) {\n      return new (t || FlowVisualizerComponent)();\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: FlowVisualizerComponent,\n      selectors: [[\"app-flow-visualizer\"]],\n      decls: 2,\n      vars: 2,\n      consts: [[2, \"width\", \"100%\", \"height\", \"400px\", \"display\", \"block\", 3, \"Highcharts\", \"options\"]],\n      template: function FlowVisualizerComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelement(0, \"hr\")(1, \"highcharts-chart\", 0);\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"Highcharts\", ctx.Highcharts)(\"options\", ctx.chartOptions);\n        }\n      },\n      dependencies: [i1.HighchartsChartComponent],\n      styles: [\"label[_ngcontent-%COMP%] {\\n  display: block;\\n  margin: 10px 0;\\n}\\n\\nbutton[_ngcontent-%COMP%] {\\n  margin-top: 10px;\\n  padding: 8px 16px;\\n  font-size: 16px;\\n  cursor: pointer;\\n}\\n\\n.flow-visualizer-container[_ngcontent-%COMP%] {\\n  display: flex;\\n  align-items: center;\\n  justify-content: space-around;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvZmxvdy12aXN1YWxpemVyL2Zsb3ctdmlzdWFsaXplci5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsY0FBYztFQUNkLGNBQWM7QUFDaEI7O0FBRUE7RUFDRSxnQkFBZ0I7RUFDaEIsaUJBQWlCO0VBQ2pCLGVBQWU7RUFDZixlQUFlO0FBQ2pCOztBQUVBO0VBQ0UsYUFBYTtFQUNiLG1CQUFtQjtFQUNuQiw2QkFBNkI7QUFDL0IiLCJzb3VyY2VzQ29udGVudCI6WyJsYWJlbCB7XHJcbiAgZGlzcGxheTogYmxvY2s7XHJcbiAgbWFyZ2luOiAxMHB4IDA7XHJcbn1cclxuXHJcbmJ1dHRvbiB7XHJcbiAgbWFyZ2luLXRvcDogMTBweDtcclxuICBwYWRkaW5nOiA4cHggMTZweDtcclxuICBmb250LXNpemU6IDE2cHg7XHJcbiAgY3Vyc29yOiBwb2ludGVyO1xyXG59XHJcblxyXG4uZmxvdy12aXN1YWxpemVyLWNvbnRhaW5lciB7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kO1xyXG59Il0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n}","map":{"version":3,"names":["Highcharts","FlowVisualizerComponent","constructor","chartOptions","chart","type","inverted","height","title","text","series","name","keys","data","nodes","id","colorByPoint","color","dataLabels","borderColor","nodeWidth","tooltip","outside","exporting","allowHTML","ngOnInit","selectors","decls","vars","consts","template","FlowVisualizerComponent_Template","rf","ctx","i0","ɵɵelement","ɵɵadvance","ɵɵproperty"],"sources":["C:\\Users\\DELL\\flow-visualizer-test\\src\\app\\flow-visualizer\\flow-visualizer.component.ts","C:\\Users\\DELL\\flow-visualizer-test\\src\\app\\flow-visualizer\\flow-visualizer.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport * as Highcharts from 'highcharts';\n\ninterface Field {\n  id: string;\n}\n\ninterface Database {\n  id: string;\n  fields: Field[];\n}\n\ninterface System {\n  id: string;\n  databases: Database[];\n}\n\n@Component({\n  selector: 'app-flow-visualizer',\n  templateUrl: './flow-visualizer.component.html',\n  styleUrls: ['./flow-visualizer.component.css']\n})\n\nexport class FlowVisualizerComponent implements OnInit {\n    Highcharts: typeof Highcharts = Highcharts;\n\n  chartOptions: Highcharts.Options = {\n    chart: {\n      type: 'organization',\n      inverted: true,\n      height: 600\n    },\n    title: {\n      text: 'System Flow'\n    },\n    series: [{\n      type: 'organization',\n      name: 'Org Chart',\n      keys: ['from', 'to'],\n      data: [\n        ['System A', 'DB1'],\n        ['System A', 'DB2'],\n        ['DB1', 'Field1'],\n        ['DB1', 'Field2'],\n        ['DB2', 'Field3'],\n        ['System B', 'DB3'],\n        ['System B', 'DB4'],\n        ['DB3', 'FieldA'],\n        ['DB4', 'FieldB']\n      ],\n      nodes: [\n        { id: 'System A', title: 'System A', name: 'System A' },\n        { id: 'DB1', title: 'DB1', name: 'Database 1' },\n        { id: 'DB2', title: 'DB2', name: 'Database 2' },\n        { id: 'Field1', title: 'Field1', name: 'Field 1' },\n        { id: 'Field2', title: 'Field2', name: 'Field 2' },\n        { id: 'Field3', title: 'Field3', name: 'Field 3' },\n        { id: 'System B', title: 'System B', name: 'System B' },\n        { id: 'DB3', title: 'DB3', name: 'Database 3' },\n        { id: 'DB4', title: 'DB4', name: 'Database 4' },\n        { id: 'FieldA', title: 'FieldA', name: 'Field A' },\n        { id: 'FieldB', title: 'FieldB', name: 'Field B' }\n      ],\n      colorByPoint: false,\n      color: '#007ad0',\n      dataLabels: {\n        color: 'white'\n      },\n      borderColor: 'white',\n      nodeWidth: 65\n    }],\n    tooltip: {\n      outside: true\n    },\n    exporting: {\n      allowHTML: true\n    }\n  };\n\n  ngOnInit(): void {}\n}\n","<!-- <div class=\"flow-visualizer-container\">\n  <label>\n    Select System:\n    <select [(ngModel)]=\"selectedSystemId\" (change)=\"selectedDBId = null\">\n      <option *ngFor=\"let sys of data.systems\" [value]=\"sys.id\">{{ sys.id }}</option>\n    </select>\n  </label>\n\n  <label>\n    Select Database:\n    <select [(ngModel)]=\"selectedDBId\" [disabled]=\"!selectedSystemId\">\n      <option *ngFor=\"let db of getDatabasesForSelectedSystem()\" [value]=\"db.id\">{{ db.id }}</option>\n    </select>\n  </label>\n\n  <label>\n    New Field Name:\n    <input type=\"text\" [(ngModel)]=\"newFieldId\" placeholder=\"Enter field name\" />\n  </label>\n\n  <button (click)=\"addField()\">Add Field</button>\n</div> -->\n\n<hr />\n\n<highcharts-chart\n  [Highcharts]=\"Highcharts\"\n  [options]=\"chartOptions\"\n  style=\"width: 100%; height: 400px; display: block;\"\n>\n</highcharts-chart>\n"],"mappings":"AACA,OAAO,KAAKA,UAAU,MAAM,YAAY;;;AAsBxC,OAAM,MAAOC,uBAAuB;EANpCC,YAAA;IAOI,KAAAF,UAAU,GAAsBA,UAAU;IAE5C,KAAAG,YAAY,GAAuB;MACjCC,KAAK,EAAE;QACLC,IAAI,EAAE,cAAc;QACpBC,QAAQ,EAAE,IAAI;QACdC,MAAM,EAAE;OACT;MACDC,KAAK,EAAE;QACLC,IAAI,EAAE;OACP;MACDC,MAAM,EAAE,CAAC;QACPL,IAAI,EAAE,cAAc;QACpBM,IAAI,EAAE,WAAW;QACjBC,IAAI,EAAE,CAAC,MAAM,EAAE,IAAI,CAAC;QACpBC,IAAI,EAAE,CACJ,CAAC,UAAU,EAAE,KAAK,CAAC,EACnB,CAAC,UAAU,EAAE,KAAK,CAAC,EACnB,CAAC,KAAK,EAAE,QAAQ,CAAC,EACjB,CAAC,KAAK,EAAE,QAAQ,CAAC,EACjB,CAAC,KAAK,EAAE,QAAQ,CAAC,EACjB,CAAC,UAAU,EAAE,KAAK,CAAC,EACnB,CAAC,UAAU,EAAE,KAAK,CAAC,EACnB,CAAC,KAAK,EAAE,QAAQ,CAAC,EACjB,CAAC,KAAK,EAAE,QAAQ,CAAC,CAClB;QACDC,KAAK,EAAE,CACL;UAAEC,EAAE,EAAE,UAAU;UAAEP,KAAK,EAAE,UAAU;UAAEG,IAAI,EAAE;QAAU,CAAE,EACvD;UAAEI,EAAE,EAAE,KAAK;UAAEP,KAAK,EAAE,KAAK;UAAEG,IAAI,EAAE;QAAY,CAAE,EAC/C;UAAEI,EAAE,EAAE,KAAK;UAAEP,KAAK,EAAE,KAAK;UAAEG,IAAI,EAAE;QAAY,CAAE,EAC/C;UAAEI,EAAE,EAAE,QAAQ;UAAEP,KAAK,EAAE,QAAQ;UAAEG,IAAI,EAAE;QAAS,CAAE,EAClD;UAAEI,EAAE,EAAE,QAAQ;UAAEP,KAAK,EAAE,QAAQ;UAAEG,IAAI,EAAE;QAAS,CAAE,EAClD;UAAEI,EAAE,EAAE,QAAQ;UAAEP,KAAK,EAAE,QAAQ;UAAEG,IAAI,EAAE;QAAS,CAAE,EAClD;UAAEI,EAAE,EAAE,UAAU;UAAEP,KAAK,EAAE,UAAU;UAAEG,IAAI,EAAE;QAAU,CAAE,EACvD;UAAEI,EAAE,EAAE,KAAK;UAAEP,KAAK,EAAE,KAAK;UAAEG,IAAI,EAAE;QAAY,CAAE,EAC/C;UAAEI,EAAE,EAAE,KAAK;UAAEP,KAAK,EAAE,KAAK;UAAEG,IAAI,EAAE;QAAY,CAAE,EAC/C;UAAEI,EAAE,EAAE,QAAQ;UAAEP,KAAK,EAAE,QAAQ;UAAEG,IAAI,EAAE;QAAS,CAAE,EAClD;UAAEI,EAAE,EAAE,QAAQ;UAAEP,KAAK,EAAE,QAAQ;UAAEG,IAAI,EAAE;QAAS,CAAE,CACnD;QACDK,YAAY,EAAE,KAAK;QACnBC,KAAK,EAAE,SAAS;QAChBC,UAAU,EAAE;UACVD,KAAK,EAAE;SACR;QACDE,WAAW,EAAE,OAAO;QACpBC,SAAS,EAAE;OACZ,CAAC;MACFC,OAAO,EAAE;QACPC,OAAO,EAAE;OACV;MACDC,SAAS,EAAE;QACTC,SAAS,EAAE;;KAEd;;EAEDC,QAAQA,CAAA,GAAU;;;uBAxDPxB,uBAAuB;IAAA;EAAA;;;YAAvBA,uBAAuB;MAAAyB,SAAA;MAAAC,KAAA;MAAAC,IAAA;MAAAC,MAAA;MAAAC,QAAA,WAAAC,iCAAAC,EAAA,EAAAC,GAAA;QAAA,IAAAD,EAAA;UCApCE,EAAA,CAAAC,SAAA,SAAM;;;UAGJD,EAAA,CAAAE,SAAA,GAAyB;UAAzBF,EAAA,CAAAG,UAAA,eAAAJ,GAAA,CAAAjC,UAAA,CAAyB,YAAAiC,GAAA,CAAA9B,YAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}